---

airflow_python_local_dist_packages: '/usr/local/lib/python3.5/dist-packages'
airflow_python_libraries_path: '/usr/lib/python3/dist/packages/:/usr/local/lib/python3.5/dist-packages/'

# We assume that MRI database is deployed under the same Postgres instance as airflow database
# Identifier must be under /data-factory/airflow namespace to be able to use dependencies on scheduler and webserver
airflow_db_marathon_id: '/data-factory/airflow/airflow-db'

airflow_scheduler_marathon_id: '/data-factory/airflow/scheduler'
airflow_scheduler_marathon_dependencies:
  - "{{ airflow_db_marathon_id }}"

airflow_webserver_marathon_id: '/data-factory/airflow/webserver'
airflow_webserver_marathon_dependencies:
  - "{{ airflow_db_marathon_id }}"
  - "{{ airflow_scheduler_marathon_id }}"

# TODO airflow_executor: 'MesosExecutor'

# Need both Python2 version of the Postgres library for ansible and Python 3 version for Airflow
airflow_db_deb_packages:
  - python-pip
  - python-psycopg2
  - python3-pip
  - python3-psycopg2
  - python3-numpy
  - curl

mri_db_deb_packages:
  - python3-pip
  - python3-psycopg2
  - curl

airflow_deb_packages:
  - netcat
  - curl
  - python3-pip
  - python3-dev
  - python3-psycopg2
  - libffi-dev
  - build-essential
  - locales
  - libffi-dev
  - libssl-dev

airflow_pip_packages:
  - "pytz==2015.7"
  - pyOpenSSL
  - ndg-httpsclient
  - pyasn1
  - pydicom
  - alembic
  - "slackclient=={{ slackclient_py_version }}"
  - "docker-py=={{ docker_py_version }}"
  - "mri-meta-extract=={{ mri_meta_extract_version }}"
  - "i2b2-import=={{ i2b2_import_version }}"
  - "airflow_imaging_plugins=={{ airflow_imaging_plugins_version }}"

airflow_plugins:
  - name: mesos
    required_debs: []
    required_pips: []
  - name: postgresql
    required_debs:
      - postgresql-client
      - python3-psycopg2
    required_pips: []
  - name: crypto
    required_debs:
      - libssl-dev
      - python-cryptography
      - python3-cryptography
    required_pips: []
  - name: ldap
    required_debs:
      - libkrb5-dev
      - libsasl2-dev
    required_pips: []

#airflow_pool_io_intensive: 12
#airflow_pool_remote_file_copy: 2
#airflow_pool_image_preprocessing: '{{ ansible_processor_vcpus - airflow_pool_io_intensive - 1 }}'

# List of slot pools to create in Airflow (similar to using the Pools menu in Airflow webserver)
airflow_slot_pools:
  - name: 'image_preprocessing'
    slots: '{{ airflow_pool_image_preprocessing }}'
    description: 'Number of parallel Matlab instances that can process images'
  - name: 'io_intensive'
    slots: '{{ airflow_pool_io_intensive }}'
    description: 'Number of concurrent IO intensive processes that can run in parallel'
  - name: 'remote_file_copy'
    slots: '{{ airflow_pool_remote_file_copy }}'
    description: 'Number of concurrent file copy operations over the network'

# airflow_scripts_verify_commit
airflow_scripts:
  - url: https://github.com/HBPMedical/mri-preprocessing-pipeline.git
    version: '{{ mri_preprocessing_pipeline_version }}'
    verify_commit: '{{ airflow_scripts_verify_commit | default(False) }}'
    dest: '{{ airflow_scripts_root }}/mri-preprocessing-pipeline'
  - url: https://github.com/HBPMedical/data-factory-airflow-dags.git
    version: '{{data_factory_airflow_dags_version }}'
    # TODO set to true
    verify_commit: false
    dest: '{{ airflow_scripts_root }}/data-factory-airflow-dags'

airflow_dags_folder: "{{ airflow_scripts_root }}/data-factory-airflow-dags"

# Configuration for Data factory pipelines (MRI preprocessing and ETL) running in Airflow
#data_factory_datasets
#data_factory_local_drive
#data_factory_email_errors_to
#data_factory_slack_channel
#data_factory_slack_channel_user
#data_factory_mipmap_db_confile_file: ''

#main_dataset_label: "LREN"
#main_preprocessing_input_folder: "/mnt/filearc/CRN/LREN/IRMMP16/prisma"
#main_preprocessing_input_config: 'boost,session_id_by_patient,visit_id_in_patient_id'
#main_preprocessing_max_active_runs: 1
#main_preprocessing_scanners: "daily,continuous"
#main_preprocessing_pipelines: 'dicom_to_nifti,mpm_maps,neuro_morphometric_atlas'
#main_preprocessing_min_free_space
#main_preprocessing_preprocessing_copy_to_folder_local_folder: "/data/incoming"
#main_preprocessing_dicom_files_pattern: '**/MR.*'
#main_preprocessing_images_organiser_docker_image: 'hbpmip/hierarchizer'
#main_preprocessing_images_organiser_version: '{{ hierarchizer_version }}'
#main_preprocessing_images_organiser_local_folder: /data/organiser
#main_preprocessing_images_organiser_dataset_type: 'DICOM'
#main_preprocessing_images_organiser_data_structure: 'PatientID:AcquisitionDate:SeriesDescription:SeriesDate'
#main_preprocessing_nifti_local_folder: "/data/Nifti_Data_MPMs"
#main_preprocessing_nifti_server_folder: "/mnt/filerc/LREN/SHARE/AIR_VBQ_Output_All/DataNifti_All"
#main_preprocessing_mpm_maps_local_folder: "/data/MPMs_All"
#main_preprocessing_mpm_maps_server_folder: "/mnt/filerc/LREN/SHARE/AIR_VBQ_Output_All"
#main_preprocessing_neuro_morphometric_atlas_local_folder: "/data/Neuromorphics_Atlasing"
#main_preprocessing_neuro_morphometric_atlas_server_folder: "/mnt/filerc/LREN/SHARE/AIR_Neuromorphics_Atlasing"
#main_preprocessing_neuro_morphometric_atlas_TPM_template: "{{ spm_dir }}/tpm/nwTPM_sl3.nii"
#main_preprocessing_pipelines_path: "{{ airflow_scripts_root }}/mri-preprocessing-pipeline/Pipelines"
#main_preprocessing_protocols_file: "{{ airflow_scripts_root }}/mri-preprocessing-pipeline/Protocols_definition.txt"
#main_preprocessing_ehr_scanners
#main_preprocessing_ehr_data_folder
#main_preprocessing_ehr_data_folder_depth
#main_preprocessing_ehr_versioned_folder
#main_preprocessing_ehr_to_i2b2_capture_docker_image
#main_preprocessing_ehr_to_i2b2_capture_folder

#spm_dir: /opt/spm12

airflow_extra_settings:
  - section: mesos_env
    parameters:
      PYTHONPATH: '{{ airflow_python_libraries_path }}'
  - section: spm
    parameters:
      spm_dir: '{{ spm_dir }}'
  - section: mipmap
    parameters:
      db_config_file: "{{ data_factory_mipmap_db_config_file | default('/dev/null') }}"
  - section: "data-factory"
    parameters:
      sql_alchemy_conn: '{{ data_catalog_db_sql_alchemy_conn }}'
      datasets: '{{ data_factory_datasets }}'
      email_errors_to: '{{ data_factory_email_errors_to }}'
      slack_token: '{{ data_factory_slack_token | default(slack_token) }}'
      slack_channel: '{{ data_factory_slack_channel }}'
      slack_channel_user: '{{ data_factory_slack_channel_user }}'
  - section: "data-factory:main"
    parameters:
      dataset_label: '{{ main_dataset_label }}'
  - section: "data-factory:main:preprocessing"
    parameters:
      input_folder: '{{ main_preprocessing_input_folder }}'
      input_config: '{{ main_preprocessing_input_config }}'
      max_active_runs: '{{ main_preprocessing_max_active_runs | default(30) }}'
      min_free_space: '{{ main_preprocessing_min_free_space | default(0.3) }}'
      misc_library_path: '{{ main_preprocessing_misc_library_path }}'
      pipelines_path: '{{ main_preprocessing_pipelines_path }}'
      scanners: '{{ main_preprocessing_scanners }}'
      pipelines: '{{ main_preprocessing_pipelines }}'
  - section: "data-factory:main:preprocessing:copy_to_local"
    parameters:
      output_folder: "{{ main_preprocessing_copy_to_local_output_folder }}"
  - section: "data-factory:main:preprocessing:dicom_organiser"
    parameters:
      output_folder: "{{ main_preprocessing_dicom_organiser_output_folder }}"
      data_structure: "{{ main_preprocessing_dicom_organiser_data_structure }}"
      docker_image: "{{ main_preprocessing_dicom_organiser_docker_image | default('hbpmip/hierarchizer') }}:{{ main_preprocessing_dicom_organiser_version | default('latest') }}"
      docker_input_dir: "{{ main_preprocessing_dicom_organiser_docker_input_folder | default('/input_folder') }}"
      docker_output_dir: "{{ main_preprocessing_dicom_organiser_docker_output_folder | default('/output_folder') }}"
  - section: "data-factory:main:preprocessing:dicom_selection"
    parameters:
      output_folder: "{{ main_preprocessing_dicom_selection_output_folder | default(None) }}"
      images_selection_csv_path: "{{ main_preprocessing_dicom_selection_images_selection_csv_path | default(None) }}"
  - section: "data-factory:main:preprocessing:dicom_select_T1"
    parameters:
      output_folder: "{{ main_preprocessing_dicom_select_t1_output_folder | default(None) }}"
      spm_function: "{{ main_preprocessing_dicom_select_t1_spm_function }}"
      pipeline_path: "{{ main_preprocessing_dicom_select_t1_pipeline_path }}"
      misc_library_path: "{{ main_preprocessing_dicom_select_t1_misc_library_path }}"
      protocols_file: "{{ main_preprocessing_dicom_select_T1_protocols_file }}"
  - section: "data-factory:main:preprocessing:dicom_to_nifti"
    parameters:
      output_folder: "{{ main_preprocessing_dicom_to_nifti_output_folder | default(None) }}"
      backup_folder: "{{ main_preprocessing_dicom_to_nifti_backup_folder }}"
      spm_function: "{{ main_preprocessing_dicom_to_nifti_spm_function }}"
      pipeline_path: "{{ main_preprocessing_dicom_to_nifti_pipeline_path }}"
      misc_library_path: "{{ main_preprocessing_dicom_to_nifti_misc_library_path }}"
      protocols_file: "{{ main_preprocessing_dicom_to_nifti_protocols_file }}"
      dcm2nii_program: "{{ main_preprocessing_dicom_to_nifti_dcm2nii_program }}"
  - section: "data-factory:main:preprocessing:nifti_organiser"
    parameters:
      output_folder: "{{ main_preprocessing_nifti_organiser_output_folder }}"
      data_structure: "{{ main_preprocessing_nifti_organiser_data_structure }}"
      docker_image: "{{ main_preprocessing_nifti_organiser_docker_image | default('hbpmip/hierarchizer') }}:{{ main_preprocessing_nifti_organiser_version | default('latest') }}"
      docker_input_dir: "{{ main_preprocessing_nifti_organiser_input_folder | default('/input_folder') }}"
      docker_output_dir: "{{ main_preprocessing_nifti_organiser_output_folder | default('/output_folder') }}"
  - section: "data-factory:main:preprocessing:nifti_selection"
    parameters:
      output_folder: "{{ main_preprocessing_nifti_selection_output_folder | default(None) }}"
      csv_path: "{{ main_preprocessing_nifti_selection_csv_path | default(None) }}"
  - section: "data-factory:main:preprocessing:mpm_maps"
    parameters:
      output_folder: "{{ main_preprocessing_mpm_maps_output_folder | default(None) }}"
      backup_folder: "{{ main_preprocessing_mpm_maps_backup_folder }}"
      spm_function: "{{ main_preprocessing_mpm_maps_spm_function }}"
      pipeline_path: "{{ main_preprocessing_mpm_maps_pipeline_path }}"
      misc_library_path: "{{ main_preprocessing_mpm_maps_misc_library_path }}"
      protocols_file: "{{ main_preprocessing_mpm_maps_protocols_file }}"
  - section: "data-factory:main:preprocessing:neuro_morphometric_atlas"
    parameters:
      output_folder: "{{ main_preprocessing_neuro_morphometric_atlas_output_folder | default(None) }}"
      backup_folder: "{{ main_preprocessing_neuro_morphometric_atlas_backup_folder }}"
      spm_function: "{{ main_preprocessing_neuro_morphometric_atlas_spm_function }}"
      pipeline_path: "{{ main_preprocessing_neuro_morphometric_atlas_pipeline_path }}"
      misc_library_path: "{{ main_preprocessing_neuro_morphometric_atlas_misc_library_path }}"
      protocols_file: "{{ main_preprocessing_neuro_morphometric_atlas_protocols_file }}"
      tpm_template: "{{ main_preprocessing_neuro_morphometric_atlas_tpm_template }}"
  - section: "data-factory:main:ehr"
    parameters:
      input_folder: "{{ main_ehr_input_folder | default(None) }}"
      input_folder_depth: "{{ main_ehr_input_folder_depth | default(0) }}"
      min_free_space: "{{ main_ehr_min_free_space | default(0.3) }}"
      scanners: "{{ main_ehr_scanners }}"
      pipelines: "{{ main_ehr_pipelines }}"
  - section: "data-factory:main:ehr:map_ehr_to_i2b2"
    parameters:
      docker_image: "{{ main_ehr_map_ehr_to_i2b2_docker_image | default('hbpmip/mipmap-demo-ehr-to-i2b2') }}:{{ main_ehr_map_ehr_to_i2b2_version | default('latest') }}"
  - section: "data-factory:main:ehr:version_incoming_ehr"
    parameters:
      output_folder: "{{ main_ehr_version_incoming_ehr_output_folder }}"

airflow_work_dirs: "
  {% set dirs = [] %}
  {% if main_preprocessing_copy_to_local_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_copy_to_local_output_folder] %}
  {% endif %}
  {% if main_preprocessing_dicom_organiser_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_dicom_organiser_output_folder] %}
  {% endif %}
  {% if main_preprocessing_dicom_select_t1_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_dicom_select_t1_output_folder] %}
  {% endif %}
  {% if main_preprocessing_dicom_to_nifti_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_dicom_to_nifti_output_folder] %}
  {% endif %}
  {% if main_preprocessing_nifti_organiser_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_nifti_organiser_output_folder] %}
  {% endif %}
  {% if main_preprocessing_mpm_maps_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_mpm_maps_output_folder] %}
  {% endif %}
  {% if main_preprocessing_neuro_morphometric_atlas_output_folder is defined %}
    {% set dirs = dirs + [main_preprocessing_neuro_morphometric_atlas_output_folder] %}
  {% endif %}
  {{ dirs | list }}
"

# airflow_work_dirs:
#   - '{{ main_preprocessing_copy_to_local_output_folder }}'
#   - '{{ main_preprocessing_dicom_organiser_output_folder }}'
#   - '{{ main_preprocessing_dicom_select_t1_output_folder }}'
#   - '{{ main_preprocessing_dicom_to_nifti_output_folder }}'
#   - '{{ main_preprocessing_nifti_organiser_output_folder }}'
#   - '{{ main_preprocessing_mpm_maps_output_folder }}'
#   - '{{ main_preprocessing_neuro_morphometric_atlas_output_folder }}'

